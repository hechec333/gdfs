// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.0--rc2
// source: gdfs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChunkServer_GRPCReadChunk_FullMethodName   = "/proto.ChunkServer/GRPCReadChunk"
	ChunkServer_GRPCWriteChunk_FullMethodName  = "/proto.ChunkServer/GRPCWriteChunk"
	ChunkServer_GRPCAppendChunk_FullMethodName = "/proto.ChunkServer/GRPCAppendChunk"
	ChunkServer_GRPCForWardData_FullMethodName = "/proto.ChunkServer/GRPCForWardData"
)

// ChunkServerClient is the client API for ChunkServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkServerClient interface {
	GRPCReadChunk(ctx context.Context, in *ReadChunkArg, opts ...grpc.CallOption) (*ReadChunkReply, error)
	GRPCWriteChunk(ctx context.Context, in *WriteChunkArg, opts ...grpc.CallOption) (*WriteChunkReply, error)
	GRPCAppendChunk(ctx context.Context, in *AppendChunkArg, opts ...grpc.CallOption) (*AppendChunkReply, error)
	GRPCForWardData(ctx context.Context, in *ForwardDataArg, opts ...grpc.CallOption) (*ForwardDataReply, error)
}

type chunkServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServerClient(cc grpc.ClientConnInterface) ChunkServerClient {
	return &chunkServerClient{cc}
}

func (c *chunkServerClient) GRPCReadChunk(ctx context.Context, in *ReadChunkArg, opts ...grpc.CallOption) (*ReadChunkReply, error) {
	out := new(ReadChunkReply)
	err := c.cc.Invoke(ctx, ChunkServer_GRPCReadChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) GRPCWriteChunk(ctx context.Context, in *WriteChunkArg, opts ...grpc.CallOption) (*WriteChunkReply, error) {
	out := new(WriteChunkReply)
	err := c.cc.Invoke(ctx, ChunkServer_GRPCWriteChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) GRPCAppendChunk(ctx context.Context, in *AppendChunkArg, opts ...grpc.CallOption) (*AppendChunkReply, error) {
	out := new(AppendChunkReply)
	err := c.cc.Invoke(ctx, ChunkServer_GRPCAppendChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServerClient) GRPCForWardData(ctx context.Context, in *ForwardDataArg, opts ...grpc.CallOption) (*ForwardDataReply, error) {
	out := new(ForwardDataReply)
	err := c.cc.Invoke(ctx, ChunkServer_GRPCForWardData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServerServer is the server API for ChunkServer service.
// All implementations must embed UnimplementedChunkServerServer
// for forward compatibility
type ChunkServerServer interface {
	GRPCReadChunk(context.Context, *ReadChunkArg) (*ReadChunkReply, error)
	GRPCWriteChunk(context.Context, *WriteChunkArg) (*WriteChunkReply, error)
	GRPCAppendChunk(context.Context, *AppendChunkArg) (*AppendChunkReply, error)
	GRPCForWardData(context.Context, *ForwardDataArg) (*ForwardDataReply, error)
	mustEmbedUnimplementedChunkServerServer()
}

// UnimplementedChunkServerServer must be embedded to have forward compatible implementations.
type UnimplementedChunkServerServer struct {
}

func (UnimplementedChunkServerServer) GRPCReadChunk(context.Context, *ReadChunkArg) (*ReadChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCReadChunk not implemented")
}
func (UnimplementedChunkServerServer) GRPCWriteChunk(context.Context, *WriteChunkArg) (*WriteChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCWriteChunk not implemented")
}
func (UnimplementedChunkServerServer) GRPCAppendChunk(context.Context, *AppendChunkArg) (*AppendChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCAppendChunk not implemented")
}
func (UnimplementedChunkServerServer) GRPCForWardData(context.Context, *ForwardDataArg) (*ForwardDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCForWardData not implemented")
}
func (UnimplementedChunkServerServer) mustEmbedUnimplementedChunkServerServer() {}

// UnsafeChunkServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServerServer will
// result in compilation errors.
type UnsafeChunkServerServer interface {
	mustEmbedUnimplementedChunkServerServer()
}

func RegisterChunkServerServer(s grpc.ServiceRegistrar, srv ChunkServerServer) {
	s.RegisterService(&ChunkServer_ServiceDesc, srv)
}

func _ChunkServer_GRPCReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChunkArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).GRPCReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_GRPCReadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).GRPCReadChunk(ctx, req.(*ReadChunkArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_GRPCWriteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunkArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).GRPCWriteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_GRPCWriteChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).GRPCWriteChunk(ctx, req.(*WriteChunkArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_GRPCAppendChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendChunkArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).GRPCAppendChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_GRPCAppendChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).GRPCAppendChunk(ctx, req.(*AppendChunkArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkServer_GRPCForWardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardDataArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServerServer).GRPCForWardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkServer_GRPCForWardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServerServer).GRPCForWardData(ctx, req.(*ForwardDataArg))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkServer_ServiceDesc is the grpc.ServiceDesc for ChunkServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChunkServer",
	HandlerType: (*ChunkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCReadChunk",
			Handler:    _ChunkServer_GRPCReadChunk_Handler,
		},
		{
			MethodName: "GRPCWriteChunk",
			Handler:    _ChunkServer_GRPCWriteChunk_Handler,
		},
		{
			MethodName: "GRPCAppendChunk",
			Handler:    _ChunkServer_GRPCAppendChunk_Handler,
		},
		{
			MethodName: "GRPCForWardData",
			Handler:    _ChunkServer_GRPCForWardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gdfs.proto",
}
